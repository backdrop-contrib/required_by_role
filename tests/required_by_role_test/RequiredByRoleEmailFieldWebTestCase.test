<?php
/**
 * @file
 * Tests for the Email field.
 */

class RequiredByRoleEmailFieldWebTestCase extends RequiredByRoleBasic {

  /**
   * Label of the test field.
   * @var string
   */
  protected $field_label = 'Email';

  /**
   * Setup method.
   */
  protected function setUp() {

    parent::setUp(['field_ui', 'required_by_role', 'email']);

    $rid = (int) $this->required_fields_rid;

    $settings = array(
      "instance[settings][required_by_role][$rid]" => $rid,
    );

    $this->backdropLogin($this->getRequiredUser());

    $this->createEmailField(NULL, $settings);

  }

  /**
   * Test for both required and non-required roles.
   */
  public function testRequiredByRole() {

    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit['body[und][0][value]'] = $this->randomName(16);

    $this->backdropPost('node/add/' . $this->entity_bundle, $edit, t('Save'));
    $this->assertText($this->field_label . ' field is required.');

    $this->backdropLogout();

    $this->backdropLogin($this->getNonRequiredUser());

    $this->backdropPost('node/add/' . $this->entity_bundle, $edit, t('Save'));
    $this->assertText($edit['title'], "Node has been created");

  }

  /**
   * Helper function to create an email field.
   */
  protected function createEmailField($bundle = NULL, $settings = array()) {

    $node_type = $bundle ? $bundle : $this->entity_bundle;

    $name = 'email_test_' . strtolower($this->randomName(4));
    $label = $this->field_label;

    $edit = array(
      'fields[_add_new_field][label]' => $label,
      'fields[_add_new_field][field_name]' => $name,
      'fields[_add_new_field][type]' => 'email',
      'fields[_add_new_field][widget_type]' => 'email_textfield',
    );

    $field_name = 'field_' . $name;

    $this->backdropPost('admin/structure/types/manage/' . $node_type . '/fields', $edit, t('Save'));
    $this->backdropPost(NULL, array(), t('Save field settings'));
    $this->backdropPost(NULL, $settings, t('Save settings'));

    // Is field created?
    $this->assertRaw(t('Saved %label configuration', array('%label' => $label)), 'Field added');
    node_types_rebuild();
    menu_rebuild();

    return $field_name;
  }
}
