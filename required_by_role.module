<?php

/**
 * @file
 * Allows certain user roles to be exempt from required fields
 */

module_load_include('inc', 'required_by_role', 'required_by_role.date');

/**
 * Implements hook_help().
 */
function required_by_role_help($path, $arg) {
  switch ($path) {

    case 'admin/help#required_by_role':
      $output = '';
      $output .= '<p>' . t('The Required by role module provides an easy and flexible way for developers and site builders to determine whether a field (instance) should be <em>required</em> by all users or just for selected user roles.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_info_alter().
 */
function required_by_role_field_info_alter(&$info) {

  foreach ($info as $field_type => $field_type_info) {
    $info[$field_type]['instance_settings'] += array(
      'required_by_role' => array(),
    );
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function required_by_role_field_widget_form_alter(&$element, &$form_state, $context) {

  if (!$context['instance']['required']) {

    global $user;

    $account = $user;
    $settings = $context['instance']['settings'];

    // Getting the value based on our rules.
    $is_required = required_by_role_is_required($account, $settings, $context, $form_state);

    // Recreating the whole element.
    // We need to do this because the hook_field_widget_form_alter acts later in
    // field_default_form and the element is already created, so the property
    // is not propagated.
    _required_by_role_recreate_element($element, $form_state, $context, $is_required);

    // Give the opportunity to other modules to act on this property.
    drupal_alter('required_property', $element, $field, $is_required);

  }
}

/**
 * Helper function to recreate the element.
 *
 * Mostly copied from field_default_form in field.form.inc file.
 */
function _required_by_role_recreate_element(&$element, &$form_state, $context, $is_required, $get_delta = NULL) {

  $field_name = $context['field']['field_name'];
  $instance = $context['instance'];
  $field = $context['field'];
  $langcode = $context['langcode'];
  $items = $context['items'];
  $form = $context['form'];
  $entity = isset($context['form']['#entity']) ? $context['form']['#entity'] : NULL;
  $entity_type = $context['instance']['entity_type'];
  $parents = $context['form']['#parents'];

  // Important to set here to be inherited by the children.
  $is_required = $is_required !== NULL ? $is_required : $instance['required'];
  $instance['required'] = $is_required;

  // If field module handles multiple values for this form element, and we are
  // displaying an individual element, process the multiple value form.
  if (!isset($get_delta) && field_behaviors_widget('multiple values', $instance) == FIELD_BEHAVIOR_DEFAULT) {
    // Store the entity in the form.
    $form['#entity'] = $entity;
    $elements = required_by_role_field_multiple_value_form($field, $instance, $langcode, $items, $form, $form_state);
    $element = $elements[$context['delta']];

  }
  // If the widget is handling multiple values (e.g Options), or if we are
  // displaying an individual element, just get a single form element and make
  // it the $delta value.
  else {
    $delta = isset($get_delta) ? $get_delta : 0;
    $function = $instance['widget']['module'] . '_field_widget_form';
    if (function_exists($function)) {
      $element = array(
        '#entity' => $entity,
        '#entity_type' => $instance['entity_type'],
        '#bundle' => $instance['bundle'],
        '#field_name' => $field_name,
        '#language' => $langcode,
        '#field_parents' => $parents,
        '#columns' => array_keys($field['columns']),
        '#title' => check_plain($instance['label']),
        '#description' => field_filter_xss($instance['description']),
        // Only the first widget should be required.
        '#required' => $delta == 0 && $instance['required'],
        '#delta' => $delta,
      );

      $element = $function($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);

    }
  }
}

/**
 * Special handling to create form elements for multiple values.
 *
 * Handles generic features for multiple fields:
 * - number of widgets
 * - AHAH-'add more' button
 * - drag-n-drop value reordering
 */
function required_by_role_field_multiple_value_form($field, $instance, $langcode, $items, &$form, &$form_state) {
  $field_name = $field['field_name'];
  $parents = $form['#parents'];

  // Determine the number of widgets to display.
  switch ($field['cardinality']) {
    case FIELD_CARDINALITY_UNLIMITED:
      $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
      $max = $field_state['items_count'];
      break;

    default:
      $max = $field['cardinality'] - 1;
      break;
  }

  $title = check_plain($instance['label']);
  $description = field_filter_xss($instance['description']);

  $id_prefix = implode('-', array_merge($parents, array($field_name)));
  $wrapper_id = drupal_html_id($id_prefix . '-add-more-wrapper');

  $field_elements = array();

  $function = $instance['widget']['module'] . '_field_widget_form';
  if (function_exists($function)) {
    for ($delta = 0; $delta <= $max; $delta++) {
      $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
      $element = array(
        '#entity_type' => $instance['entity_type'],
        '#entity' => $form['#entity'],
        '#bundle' => $instance['bundle'],
        '#field_name' => $field_name,
        '#language' => $langcode,
        '#field_parents' => $parents,
        '#columns' => array_keys($field['columns']),
        // For multiple fields, title and description are handled by the wrapping table.
        '#title' => $multiple ? '' : $title,
        '#description' => $multiple ? '' : $description,
        // Only the first widget should be required.
        '#required' => $delta == 0 && $instance['required'],
        '#delta' => $delta,
        '#weight' => $delta,
      );
      if ($element = $function($form, $form_state, $field, $instance, $langcode, $items, $delta, $element)) {
        // Input field for the delta (drag-n-drop reordering).
        if ($multiple) {
          // We name the element '_weight' to avoid clashing with elements
          // defined by widget.
          $element['_weight'] = array(
            '#type' => 'weight',
            '#title' => t('Weight for row @number', array('@number' => $delta + 1)),
            '#title_display' => 'invisible',
             // Note: this 'delta' is the FAPI 'weight' element's property.
            '#delta' => $max,
            '#default_value' => isset($items[$delta]['_weight']) ? $items[$delta]['_weight'] : $delta,
            '#weight' => 100,
          );
        }

        // Allow modules to alter the field widget form element.
        $context = array(
          'form' => $form,
          'field' => $field,
          'instance' => $instance,
          'langcode' => $langcode,
          'items' => $items,
          'delta' => $delta,
        );

        $field_elements[$delta] = $element;
      }
    }

    if ($field_elements) {
      $field_elements += array(
        '#theme' => 'field_multiple_value_form',
        '#field_name' => $field['field_name'],
        '#cardinality' => $field['cardinality'],
        '#title' => $title,
        '#required' => $instance['required'],
        '#description' => $description,
        '#prefix' => '<div id="' . $wrapper_id . '">',
        '#suffix' => '</div>',
        '#max_delta' => $max,
      );
      // Add 'add more' button, if not working with a programmed form.
      if ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED && empty($form_state['programmed'])) {
        $verrors = array(array_merge($parents, array($field_name, $langcode)));
        $field_elements['add_more'] = array(
          '#type' => 'submit',
          '#name' => strtr($id_prefix, '-', '_') . '_add_more',
          '#value' => t('Add another item'),
          '#attributes' => array('class' => array('field-add-more-submit')),
          '#limit_validation_errors' => $verrors,
          '#submit' => array('field_add_more_submit'),
          '#ajax' => array(
            'callback' => 'field_add_more_js',
            'wrapper' => $wrapper_id,
            'effect' => 'fade',
          ),
        );
      }
    }
  }

  return $field_elements;
}

/**
 * Central method to figure out if the fields should be required or not based on the current callback.
 */
function required_by_role_is_required($account, $settings, $context, $form_state) {

  $is_required = NULL;

  $roles = $settings['required_by_role'] ? $settings['required_by_role'] : array();

  $required_callback = _required_by_role_get_callback();

  if (is_callable($required_callback)) {
    $is_required = $required_callback($account, $roles, $context, $form_state);
  }

  return $is_required;
}

/**
 * Helper function to get the callback.
 */
function _required_by_role_get_callback() {

  $required_callback = module_invoke('required_by_role', 'required_by_role_callback');

  // We give here the opportunity to change the callback function.
  drupal_alter('required_by_role_callback', $required_callback);

  return $required_callback;
}

/**
 * Implements hook_required_by_role_callback.
 * @return string
 *   Callback function to determine if the field is required or not
 */
function required_by_role_required_by_role_callback() {
  return '_required_by_role_roles_intersect';
}

/**
 * At least one of $roles values is in the $account->roles array?.
 */
function _required_by_role_roles_intersect($account, $roles, $context, $form_state) {

  $match = array_intersect(array_keys($account->roles), $roles);
  $is_required = !empty($match);

  return $is_required;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function required_by_role_form_field_ui_field_edit_form_alter(&$form, $form_state) {

  $field_name = $form['#field']['field_name'];
  $required_by_role = $form['#instance']['settings']['required_by_role'];
  $label = t('Required by role');
  $description = t('Select this option if you want this field to be required for ALL ROLES, otherwise choose specific roles in the checkboxes, below, under %name', array('%name' => 'Required by role'));

  $roles = user_roles();
  unset($roles[DRUPAL_AUTHENTICATED_RID]);

  $header = array(
    'name' => t('Role'),
  );

  foreach ($roles as $rid => $role) {
    $options[$rid] = array(
      'name' => $role,
    );
  }

  $module_path = drupal_get_path('module', 'required_by_role');

  // Js add, needed because STATES API behaves unproperly
  // in this context hidding required option.
  $attached = array(
    'js' => array(
      $module_path . '/required_by_role.js',
    ),
  );

  $form['instance']['settings']['required_by_role'] = array(
    '#prefix' => '<label>' . $label . '</label>',
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#default_value' => $required_by_role,
    '#weight' => $form['instance']['required']['#weight'] + 1,
    '#attached' => $attached,
    '#empty' => t('No roles available.'),
    '#attributes' => array(
      'id' => array('tableselect-required-by-role'),
    ),
  );

  $form['instance']['required']['#description'] = $description;

  // Default value needs always to be NOT required.
  $default_value_widget = &$form['instance']['default_value_widget'][$field_name][LANGUAGE_NONE];

  if (isset($default_value_widget[0]['#required'])) {
    $default_value_widget[0]['#required'] = FALSE;
  }
  else {
    $default_value_widget['#required'] = FALSE;
  }

  if (isset($default_value_widget[0]['value']['#required'])) {
    $default_value_widget[0]['value']['#required'] = FALSE;
  }

}
